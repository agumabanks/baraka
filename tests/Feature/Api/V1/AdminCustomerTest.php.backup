<?php

use App\Enums\UserType;
use App\Models\User;

test('admin can index customers with pagination', function () {
    $admin = User::factory()->create([
        'user_type' => UserType::ADMIN,
    ]);

    // Create multiple customers
    User::factory()->count(5)->create([
        'user_type' => UserType::MERCHANT,
    ]);

    $loginResponse = $this->postJson('/api/v1/login', [
        'email' => $admin->email,
        'password' => 'password',
    ], [
        'device_uuid' => 'admin-customer-device',
    ]);

    $token = $loginResponse->json('data.token');

    $response = $this->getJson('/api/v1/admin/customers', [
        'Authorization' => 'Bearer '.$token,
        'device_uuid' => 'admin-customer-device',
    ]);

    $response->assertStatus(200)
        ->assertJsonStructure([
            'success',
            'data' => [
                'customers' => [
                    'data' => [
                        '*' => ['id', 'name', 'email'],
                    ],
                    'current_page',
                    'per_page',
                    'total',
                ],
            ],
        ]);

    expect($response->json('data.customers.data'))->toHaveCount(5);
});

test('admin can search customers by name', function () {
    $admin = User::factory()->create([
        'user_type' => UserType::ADMIN,
    ]);

    $customer1 = User::factory()->create([
        'name' => 'John Doe',
        'user_type' => UserType::MERCHANT,
    ]);

    $customer2 = User::factory()->create([
        'name' => 'Jane Smith',
        'user_type' => UserType::MERCHANT,
    ]);

    $loginResponse = $this->postJson('/api/v1/login', [
        'email' => $admin->email,
        'password' => 'password',
    ], [
        'device_uuid' => 'admin-search-device',
    ]);

    $token = $loginResponse->json('data.token');

    $response = $this->getJson('/api/v1/admin/customers?q=John', [
        'Authorization' => 'Bearer '.$token,
        'device_uuid' => 'admin-search-device',
    ]);

    $response->assertStatus(200);

    $customers = $response->json('data.customers.data');
    expect($customers)->toHaveCount(1);
    expect($customers[0]['id'])->toBe($customer1->id);
});

test('admin can paginate customers', function () {
    $admin = User::factory()->create([
        'user_type' => UserType::ADMIN,
    ]);

    // Create 10 customers
    User::factory()->count(10)->create([
        'user_type' => UserType::MERCHANT,
    ]);

    $loginResponse = $this->postJson('/api/v1/login', [
        'email' => $admin->email,
        'password' => 'password',
    ], [
        'device_uuid' => 'admin-pagination-device',
    ]);

    $token = $loginResponse->json('data.token');

    // Request page 1 with 5 per page
    $response = $this->getJson('/api/v1/admin/customers?per_page=5&page=1', [
        'Authorization' => 'Bearer '.$token,
        'device_uuid' => 'admin-pagination-device',
    ]);

    $response->assertStatus(200);

    $data = $response->json('data.customers');
    expect($data['data'])->toHaveCount(5);
    expect($data['current_page'])->toBe(1);
    expect($data['per_page'])->toBe(5);
    expect($data['total'])->toBe(10);
});

test('admin can view single customer', function () {
    $admin = User::factory()->create([
        'user_type' => UserType::ADMIN,
    ]);

    $customer = User::factory()->create([
        'user_type' => UserType::MERCHANT,
    ]);

    $loginResponse = $this->postJson('/api/v1/login', [
        'email' => $admin->email,
        'password' => 'password',
    ], [
        'device_uuid' => 'admin-view-device',
    ]);

    $token = $loginResponse->json('data.token');

    $response = $this->getJson("/api/v1/admin/customers/{$customer->id}", [
        'Authorization' => 'Bearer '.$token,
        'device_uuid' => 'admin-view-device',
    ]);

    $response->assertStatus(200)
        ->assertJsonStructure([
            'success',
            'data' => [
                'customer' => ['id', 'name', 'email'],
            ],
        ]);

    expect($response->json('data.customer.id'))->toBe($customer->id);
});

test('admin can update customer', function () {
    $admin = User::factory()->create([
        'user_type' => UserType::ADMIN,
    ]);

    $customer = User::factory()->create([
        'name' => 'Old Name',
        'user_type' => UserType::MERCHANT,
    ]);

    $loginResponse = $this->postJson('/api/v1/login', [
        'email' => $admin->email,
        'password' => 'password',
    ], [
        'device_uuid' => 'admin-update-device',
    ]);

    $token = $loginResponse->json('data.token');

    $updateData = [
        'name' => 'Updated Name',
        'email' => 'updated@example.com',
    ];

    $response = $this->putJson("/api/v1/admin/customers/{$customer->id}", $updateData, [
        'Authorization' => 'Bearer '.$token,
        'device_uuid' => 'admin-update-device',
        'Idempotency-Key' => 'update-customer-123',
    ]);

    $response->assertStatus(200)
        ->assertJsonStructure([
            'success',
            'data' => [
                'customer' => ['id', 'name', 'email'],
            ],
        ]);

    $customer->refresh();
    expect($customer->name)->toBe('Updated Name');
    expect($customer->email)->toBe('updated@example.com');
});

test('non-admin cannot access customer endpoints', function () {
    $merchant = User::factory()->create([
        'user_type' => UserType::MERCHANT,
    ]);

    $loginResponse = $this->postJson('/api/v1/login', [
        'email' => $merchant->email,
        'password' => 'password',
    ], [
        'device_uuid' => 'non-admin-device',
    ]);

    $token = $loginResponse->json('data.token');

    $response = $this->getJson('/api/v1/admin/customers', [
        'Authorization' => 'Bearer '.$token,
        'device_uuid' => 'non-admin-device',
    ]);

    $response->assertStatus(403);
});

test('admin customer update validation works', function () {
    $admin = User::factory()->create([
        'user_type' => UserType::ADMIN,
    ]);

    $customer = User::factory()->create([
        'user_type' => UserType::MERCHANT,
    ]);

    $loginResponse = $this->postJson('/api/v1/login', [
        'email' => $admin->email,
        'password' => 'password',
    ], [
        'device_uuid' => 'validation-device',
    ]);

    $token = $loginResponse->json('data.token');

    // Try to update with invalid email
    $response = $this->putJson("/api/v1/admin/customers/{$customer->id}", [
        'email' => 'invalid-email',
    ], [
        'Authorization' => 'Bearer '.$token,
        'device_uuid' => 'validation-device',
    ]);

    $response->assertStatus(422)
        ->assertJsonValidationErrors(['email']);
});
